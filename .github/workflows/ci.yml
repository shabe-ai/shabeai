name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: "18"

jobs:
  # Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend

      - name: Run linting
        run: pnpm lint
        working-directory: frontend

      - name: Run type checking
        run: pnpm type-check
        working-directory: frontend

      - name: Run tests
        run: pnpm test:ci
        working-directory: frontend

      - name: Build frontend
        run: pnpm build
        working-directory: frontend
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.CONVEX_URL_PROD }}

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: success() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          token: ${{ secrets.GITHUB_TOKEN }}

  # Convex Deployment Check
  convex-check:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend

      - name: Check Convex configuration
        run: |
          echo "Checking Convex configuration..."
          if [ -f "convex/convex.json" ]; then
            echo "✅ Convex configuration found"
            cat convex/convex.json
          else
            echo "❌ Convex configuration missing"
            exit 1
          fi
        working-directory: frontend

      - name: Validate Convex schema
        run: |
          echo "Validating Convex schema..."
          npx convex codegen --check
        working-directory: frontend
        env:
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT }}

  # Frontend Build Test
  frontend-build:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend

      - name: Build frontend for production
        run: pnpm build
        working-directory: frontend
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.CONVEX_URL_PROD }}

      - name: Test production build
        run: |
          echo "Testing production build..."
          if [ -d ".next" ]; then
            echo "✅ Next.js build successful"
          else
            echo "❌ Next.js build failed"
            exit 1
          fi
        working-directory: frontend 